'''
import json
import asyncio
import logging
from pathlib import Path

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

from aiocryptopay import AioCryptoPay, Networks

from config import TOKEN, CRYPTO_TOKEN

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
logging.basicConfig(level=logging.INFO)

# Telegram bot
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

# CryptoBot API
crypto = AioCryptoPay(token=CRYPTO_TOKEN, network=Networks.MAIN_NET)

# JSON –±–∞–∑–∞
DB_FILE = Path("db.json")

def read_db() -> dict:
    if not DB_FILE.exists():
        return {}
    with DB_FILE.open(encoding="utf-8") as f:
        return json.load(f)

def write_db(data: dict) -> None:
    with DB_FILE.open("w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# –°—Ç–∞–Ω –º–∞—à–∏–Ω–∏
class Shop(StatesGroup):
    id = State()
    balance = State()
    payment = State()
    buy_thing = State()

# –ö–Ω–æ–ø–∫–∞ 
bt = ReplyKeyboardBuilder()
bt.button(text='–ü–û–ü–û–í–ù–ò–¢–ò –ë–ê–õ–ê–ù–°')
bt.button(text='–ú–Ü–ô –ö–ê–ë–Ü–ù–ï–¢')
bt.button(text='–ü–†–ò–î–ë–ê–¢–ò –õ–£–¢')
bt.adjust(1)
BUY_bt = bt.as_markup(resize_keyboard=True)
BUY_bt_2 = bt.as_markup(resize_keyboard=True)
BUY_bt_3 = bt.as_markup(resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message(Command('start'))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    user_key = str(message.from_user.id)
    db = read_db()

    if user_key in db:
        game_id = db[user_key]['game_id']
        balance = db[user_key].get('balance', 0)

        await state.update_data(id=game_id)

        kb = InlineKeyboardBuilder()
        kb.button(text='CryptoBot', callback_data='button_pressed')

        await message.answer('–†–∞–¥—ñ –≤—ñ—Ç–∞—Ç–∏!\n–í–∞—à–µ —ñ–≥—Ä–æ–≤–µ ID —É–∂–µ —î –≤ –±–∞–∑—ñ. –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ –π–æ–≥–æ –∑–º—ñ–Ω–∏—Ç–∏ /change_id')
        await message.answer(f'–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}', reply_markup=BUY_bt)
        #await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è', reply_markup=kb.as_markup())
        await state.set_state(Shop.balance)
    else:
        await message.answer('–ü—Ä–∏–≤—ñ—Ç! –£–≤–µ–¥–∏ —Å–≤–æ—î —ñ–≥—Ä–æ–≤–µ ID:')
        await state.set_state(Shop.id)

# –û–±—Ä–æ–±–∫–∞ ID
@dp.message(Command('change_id'))
async def change_id(message: types.Message, state: FSMContext):
    user_key = str(message.from_user.id)
    db = read_db()
    
    if user_key in db:
        await state.update_data(is_changing_id=True)
        await message.answer('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–≥—Ä–æ–≤–µ ID:')
        await state.set_state(Shop.id)
    else:
        await message.answer('–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ /start')

@dp.message(StateFilter(Shop.id))
async def process_id(message: types.Message, state: FSMContext):
    game_id = message.text
    user_key = str(message.from_user.id)
    db = read_db()
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ –∑–º—ñ–Ω–∞ ID
    state_data = await state.get_data()
    is_changing_id = state_data.get('is_changing_id', False)
    
    if is_changing_id:
        if user_key in db:
            db[user_key]['game_id'] = game_id
            write_db(db)
            await message.answer(f'ID —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {game_id}')
            await state.clear()
            await state.set_state(Shop.balance)
            return
    
    # –Ø–∫—â–æ —Ü–µ –Ω–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
    if user_key not in db:
        db[user_key] = {
            'game_id': game_id,
            'balance': 0,
            'payments': []
        }
        write_db(db)

    await state.update_data(id=game_id)
    kb = InlineKeyboardBuilder()
    kb.button(text='CryptoBot', callback_data='button_pressed')
    await message.answer('–£—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ!')
    await message.answer(f'–í–∞—à –±–∞–ª–∞–Ω—Å: 0', reply_markup=BUY_bt)
    await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è', reply_markup=kb.as_markup())
    await state.set_state(Shop.balance)

# –ö–ª—ñ–∫ –ø–æ –∫–Ω–æ–ø—Ü—ñ "–ü–û–ü–û–í–ù–ò–¢–ò –ë–ê–õ–ê–ù–°"
@dp.message(StateFilter(Shop.balance))
async def process_balance(message: types.Message, state: FSMContext):
    if message.text == '–ü–û–ü–û–í–ù–ò–¢–ò –ë–ê–õ–ê–ù–°':
        kb = InlineKeyboardBuilder()
        kb.button(text='CryptoBot', callback_data='button_pressed')
        await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å —Å–ø–æ—Å—ñ–± –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è', reply_markup=kb.as_markup())
    elif message.text == '–ú–Ü–ô –ö–ê–ë–Ü–ù–ï–¢':
        user_key = str(message.from_user.id)
        db = read_db()
        if user_key in db:
            user_data = db[user_key]
            game_id = user_data['game_id']
            balance = user_data.get('balance', 0)
            
            # –§–æ—Ä–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–ª–∞—Ç–µ–∂—ñ–≤
            payment_history = "\n".join([f"–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: {p['amount']} USDT" for p in user_data.get('payments', [])])
            if not payment_history:
                payment_history = "–ü–æ–ø–æ–≤–Ω–µ–Ω—å —â–µ –Ω–µ –±—É–ª–æ"
            
            await message.answer(
                f"üéÆ –í–∞—à —ñ–≥—Ä–æ–≤–∏–π ID: {game_id}\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} USDT\n\n"
                f"üìä –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–ø–æ–≤–Ω–µ–Ω—å:\n{payment_history}",
                reply_markup=BUY_bt_2
            )
        else:
            await message.answer('–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ /start')
            await state.clear()
    #else:
    #    await message.answer('–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é', reply_markup=BUY_bt)
    await state.set_state(Shop.buy_thing)
# –ö–ª—ñ–∫ –ø–æ –∫–Ω–æ–ø—Ü—ñ CryptoBot
@dp.callback_query(lambda c: c.data == 'button_pressed')
async def handle_button_pressed(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–ù–∞–ø–∏—à—ñ—Ç—å —Å—É–º–º—É üí∏")
    await state.set_state(Shop.payment)

# –û–±—Ä–æ–±–∫–∞ —Å—É–º–∏ –ø–æ–ø–æ–≤–Ω–µ–Ω–Ω—è
@dp.message(StateFilter(Shop.payment))
async def process_payment(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text)
        user_key = str(message.from_user.id)
        db = read_db()

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É
        invoice = await crypto.create_invoice(asset='USDT', amount=amount)
        invoice_url = invoice.bot_invoice_url
        invoice_id = invoice.invoice_id

        await message.answer(f"–ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –æ–ø–ª–∞—Ç–∏: {invoice_url}")
        await message.answer("–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞—á–µ–∫–∞–π—Ç–µ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥...")

        # –ß–µ–∫–∞—î–º–æ –Ω–∞ –æ–ø–ª–∞—Ç—É (–¥–æ 90 —Å–µ–∫)
        for _ in range(30):
            await asyncio.sleep(3)
            try:
                result = await crypto.get_invoices(invoice_ids=invoice_id)
                if result.status == 'paid':
                    # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
                    db[user_key]['payments'].append({'amount': amount})
                    db[user_key]['balance'] = sum(p['amount'] for p in db[user_key]['payments'])
                    write_db(db)

                    await message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø—ñ—à–Ω–∞!\n–í–∞—à –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {db[user_key]['balance']}", reply_markup=BUY_bt)
                    payment_history = "\n".join([f"–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: {p['amount']}" for p in db[user_key]['payments']])
                    await message.answer(f"–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–ø–æ–≤–Ω–µ–Ω—å:\n{payment_history}", reply_markup=BUY_bt)

                    await state.set_state(Shop.balance)
                    return
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ–ø–ª–∞—Ç–∏: {e}")
                continue

        await message.answer("‚è≥ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ. –Ø–∫—â–æ –≤–∏ –≤–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ /start")
        await state.set_state(Shop.balance)

    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É (—á–∏—Å–ª–æ)", reply_markup=BUY_bt)
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —ñ–Ω–≤–æ–π—Å—É: {str(e)}")

# –ó–∞–∫—Ä–∏—Ç—Ç—è CryptoPay –∫–ª—ñ—î–Ω—Ç–∞
async def on_shutdown():
    await crypto.close()


# –ö–æ–º–∞–Ω–¥–∞ –∑–º—ñ–Ω–∏ ID 
@dp.message(Command('change_id'))
async def change_id(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ —ñ–≥—Ä–æ–≤–µ ID:')
    await state.set_state(Shop.id)

# –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ ID (–∑–º—ñ–Ω–∞ ID) 
@dp.message(StateFilter(Shop.id))
async def process_new_id(message:types.Message, state: FSMContext):
    new_id = message.text
    user_key = str(message.from_user.id)
    db = read_db()

    if user_key in db:
        db[user_key]['game_id'] = new_id
        write_db(db)

        await message.answer(f'ID —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞:{new_id}')
        await state.clear()
    else:
        await message.answer('–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ /start')
        await state.clear()

# –ö–Ω–æ–ø–∫–∞ "–ú–Ü–ô –ö–ê–ë–Ü–ù–ï–¢"
@dp.message(lambda message: message.text == '–ú–Ü–ô –ö–ê–ë–Ü–ù–ï–¢')
async def my_kabinet(message: types.Message, state: FSMContext):
    user_key = str(message.from_user.id)
    db = read_db()
    if user_key in db:
        user_data = db[user_key]
        game_id = user_data['game_id']
        balance = user_data.get('balance', 0)
        
        # –§–æ—Ä–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø–ª–∞—Ç–µ–∂—ñ–≤
        payment_history = "\n".join([f"–ü–æ–ø–æ–≤–Ω–µ–Ω–Ω—è: {p['amount']} USDT" for p in user_data.get('payments', [])])
        if not payment_history:
            payment_history = "–ü–æ–ø–æ–≤–Ω–µ–Ω—å —â–µ –Ω–µ –±—É–ª–æ"
        
        await message.answer(
            f"üéÆ –í–∞—à —ñ–≥—Ä–æ–≤–∏–π ID: {game_id}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} USDT\n\n"
            f"üìä –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–ø–æ–≤–Ω–µ–Ω—å:\n{payment_history}",
            reply_markup=BUY_bt_2
        )
    else:
        await message.answer('–í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ /start')
        await state.clear()
        

@dp.message(StateFilter(Shop.buy_thing))
async def buy_thing_shop(message: types.Message, state: FSMContext):
    if message.text == '–ü–†–ò–î–ë–ê–¢–ò –õ–£–¢':
        kb = InlineKeyboardBuilder()
        kb.button(text='–ë—Ä–æ–Ω—è 5 —Ä—ñ–≤–Ω—è', callback_data='button_pressed1')
        kb.button(text='–ë—Ä–æ–Ω—è 6 —Ä—ñ–≤–Ω—è', callback_data='button_pressed2')
        kb.button(text='–®–æ–ª–æ–º 5 —Ä—ñ–≤–Ω—è', callback_data='button_pressed3')
        kb.button(text='–®–æ–ª–æ–º 6 —Ä—ñ–≤–Ω—è', callback_data='button_pressed4')
        kb.adjust(1)
        await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å —â–æ —Ö–æ—á–µ—Ç–µ –ø—Ä–∏–¥–±–∞—Ç–∏:', reply_markup=kb.as_markup())
        await state.set_state(Shop.buy_thing)
    


       
# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot, shutdown=on_shutdown)

if __name__ == '__main__':
    asyncio.run(main())
'''